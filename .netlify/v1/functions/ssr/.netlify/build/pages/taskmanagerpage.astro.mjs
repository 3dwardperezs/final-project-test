/* empty css                                       */
import { a as createComponent, r as renderTemplate, d as renderComponent } from '../chunks/astro/server_b09etzCd.mjs';
import { n as noop, s as safe_not_equal, c as create_ssr_component, d as subscribe, a as add_attribute, e as each, b as escape, $ as $$Layout } from '../chunks/Layout_D8eZ86Ov.mjs';
export { renderers } from '../renderers.mjs';

const subscriber_queue = [];

/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 *
 * https://svelte.dev/docs/svelte-store#writable
 * @template T
 * @param {T} [value] initial value
 * @param {import('./public.js').StartStopNotifier<T>} [start]
 * @returns {import('./public.js').Writable<T>}
 */
function writable(value, start = noop) {
	/** @type {import('./public.js').Unsubscriber} */
	let stop;
	/** @type {Set<import('./private.js').SubscribeInvalidateTuple<T>>} */
	const subscribers = new Set();
	/** @param {T} new_value
	 * @returns {void}
	 */
	function set(new_value) {
		if (safe_not_equal(value, new_value)) {
			value = new_value;
			if (stop) {
				// store is ready
				const run_queue = !subscriber_queue.length;
				for (const subscriber of subscribers) {
					subscriber[1]();
					subscriber_queue.push(subscriber, value);
				}
				if (run_queue) {
					for (let i = 0; i < subscriber_queue.length; i += 2) {
						subscriber_queue[i][0](subscriber_queue[i + 1]);
					}
					subscriber_queue.length = 0;
				}
			}
		}
	}

	/**
	 * @param {import('./public.js').Updater<T>} fn
	 * @returns {void}
	 */
	function update(fn) {
		set(fn(value));
	}

	/**
	 * @param {import('./public.js').Subscriber<T>} run
	 * @param {import('./private.js').Invalidator<T>} [invalidate]
	 * @returns {import('./public.js').Unsubscriber}
	 */
	function subscribe(run, invalidate = noop) {
		/** @type {import('./private.js').SubscribeInvalidateTuple<T>} */
		const subscriber = [run, invalidate];
		subscribers.add(subscriber);
		if (subscribers.size === 1) {
			stop = start(set, update) || noop;
		}
		run(value);
		return () => {
			subscribers.delete(subscriber);
			if (subscribers.size === 0 && stop) {
				stop();
				stop = null;
			}
		};
	}
	return { set, update, subscribe };
}

/* C:/Users/ED/Documents/final-project-test/src/components/TaskManager.svelte generated by Svelte v4.2.18 */

const TaskManager = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let $tasks, $$unsubscribe_tasks;

	/* Variables */
	let taskInput = '';

	let dueDateInput = '';
	const tasks = writable([]);
	$$unsubscribe_tasks = subscribe(tasks, value => $tasks = value);

	$$unsubscribe_tasks();

	return ` <div class="flex-max-w-md mx-auto p-6 text-center bg-white shadow-md rounded-lg"><h1 class="text-2xl font-bold mb-4" data-svelte-h="svelte-18n18rz">Task List</h1> <div class="mb-4"><input type="text" placeholder="Add new Task" class="border p-2 rounded w-full mb-2" required${add_attribute("value", taskInput, 0)}> <input type="date" class="border p-2 rounded w-full mb-2"${add_attribute("value", dueDateInput, 0)}> <button class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-700" data-svelte-h="svelte-1cgu3cn">Add</button> ${``}</div> <ul class="list-none p-0"> ${each($tasks, (task, index) => {
		return `<li class="flex justify-between items-center mb-2 bg-gray-100 p-2 rounded"><div><div class="text-left items-left font-bold"><h1>${escape(task.text)}</h1></div> <div class="text-center items-center"><h1>${escape(task.dueDate)}</h1> </div></div> <div class="text-center items-center"><h1>${escape(task.status)}</h1></div> <div><button class="bg-green-500 text-white px-2 py-1 rounded hover:bg-green-700 mr-2" data-svelte-h="svelte-1pfno3">Edit</button> <button class="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-700" data-svelte-h="svelte-1fzr78t">Delete</button></div> </li>`;
	})}</ul></div>`;
});

const $$TaskManagerPage = createComponent(($$result, $$props, $$slots) => {
  return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": "Task Manager" }, { "default": ($$result2) => renderTemplate`  ${renderComponent($$result2, "TaskManager", TaskManager, { "client:load": true, "client:component-hydration": "load", "client:component-path": "@components/TaskManager.svelte", "client:component-export": "default" })} ` })}`;
}, "C:/Users/ED/Documents/final-project-test/src/pages/TaskManagerPage.astro", void 0);

const $$file = "C:/Users/ED/Documents/final-project-test/src/pages/TaskManagerPage.astro";
const $$url = "/final-project-test/TaskManagerPage";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	default: $$TaskManagerPage,
	file: $$file,
	url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
